interface Node {
  id: ID!
}

interface NeverImplemented {
  id: ID!
}

input NewUserInput {
  name: String!
  age: String!
  preferences: NewUserPreferenceInput
}

input NewUserPreferenceInput {
  loginPreferences: NewUserLoginPreferenceInput
  worldGreetings: [HelloWorld!]
}

input HelloWorld {
  hello: String!
}

input NewUserLoginPreferenceInput {
  webapp: Boolean
  string: String
  stringList: [String]
  nonNullStringList: [String!]
  nonNullStringNonNullList: [String!]!
}

type User implements Node {
  id: ID!
  name: String!
  age: String!
}

type Mutation {
  newUser(input: NewUserInput! otherField: String yetAnotherField: Float!): User!
  newPerson: String!
  nameable: Namable!
  humanOrPet: HumanOrPet!
  human: Human!
  pet: Pet!
  neverImplemented: NeverImplemented!
}

type Query {
  hello: String!
}

interface Namable {
  name: String
}

type Human implements Node & Namable {
  id: ID!
  name: String!
  humanName: String!
}

type Pet implements Node & Namable & NeverImplemented {
  id: ID!
  name: String!
  petName: String!
}

union HumanOrPet = Human | Pet
